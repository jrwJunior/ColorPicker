{"version":3,"sources":["views/components/PickerRGB/PickerSliders.tsx","views/components/PickerRGB/index.ts","views/components/PickerRGB/PickerRgb.tsx","views/components/Palettes/index.ts","views/components/Palettes/Palettes.tsx","views/components/ColorPicker/index.ts","views/components/ColorPicker/ColorPicker.tsx","app.tsx","index.tsx"],"names":["PickerSliders","colorRGB","handleClickCancel","handleClickSuccess","handleChangeSlider","className","Object","keys","map","key","value","max","tooltipVisible","onChange","readOnly","type","onClick","PickerRgb","color","useState","r","g","b","setColorRGB","visible","setVisible","useEffect","setRGBColor","rgb","split","match","parseInt","slidersProps","values","colorHex","hexStr","toString","length","join","convertHexColor","channel","prevState","content","trigger","placement","onVisibleChange","title","style","backgroundColor","colorRGBToString","Palettes","colors","name","handleClickHide","role","xmlns","width","height","viewBox","d","ColorPicker","suffix","PickerRGB","App","setColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA0DeA,G,MA5CO,SAAC,GAAD,IACpBC,EADoB,EACpBA,SACAC,EAFoB,EAEpBA,kBACAC,EAHoB,EAGpBA,mBACAC,EAJoB,EAIpBA,mBAJoB,OAMpB,oCACE,yBAAKC,UAAU,WACXC,OAAOC,KAAKN,GAAUO,KAAI,SAACC,GAAD,OAC1B,yBAAKJ,UAAU,cAAcI,IAAMA,GACjC,kBAAC,IAAD,CACEJ,UAAS,wBAAmBI,GAC5BC,MAAQT,EAASQ,GACjBE,IAAM,IACNC,gBAAiB,EACjBC,SAAU,SAACH,GAAD,OAAmBN,EAAmBM,EAAOD,MAEzD,2BACEJ,UAAU,eACVS,UAAQ,EACRJ,MAAQT,EAASQ,UAKzB,yBAAKJ,UAAU,WACb,kBAAC,IAAD,CACEU,KAAK,UACLV,UAAU,aACVW,QAAUd,GAHZ,UAOA,kBAAC,IAAD,CACEa,KAAK,UACLV,UAAU,SACVW,QAAUb,GAHZ,UC7CSc,ECcG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOL,EAA+B,EAA/BA,SAA+B,EACzBM,mBAAyB,CAACC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IADhB,mBAClDrB,EADkD,KACxCsB,EADwC,OAE3BJ,oBAAkB,GAFS,mBAElDK,EAFkD,KAEzCC,EAFyC,KAIzDC,qBAAU,WACRC,EAAYT,KACX,CAACA,IAEJ,IAUQS,EAAc,SAACT,GACnB,IACMU,EAD6BV,EAAMW,MAAM,KAAK,GAAGC,MAAM,WAC9BtB,KAAI,SAACE,GAAD,OAAmBqB,SAASrB,EAAO,OAEtEa,EAAY,CACVH,EAAGQ,EAAI,GACPP,EAAGO,EAAI,GACPN,EAAGM,EAAI,MA+BPI,EAAe,CACnB/B,WACAE,mBAZyB,YAtCH,SAAC8B,GACvB,IAAMC,EAAmB5B,OAAO2B,OAAOA,GAAQzB,KAAI,SAACE,GAClD,IAAMyB,EAAiBzB,EAAM0B,SAAS,IAEtC,OAAOD,EAAOE,OAAS,EAAhB,WAAwBF,GAAWA,KACzCG,KAAK,IAERzB,EAAS,IAAD,OAAKqB,IAgCbK,CAAgBtC,GAChBwB,GAAW,IAWXvB,kBARwB,WACxByB,EAAYT,GACZO,GAAW,IAOXrB,mBA7ByB,SAACM,EAAe8B,GACzCjB,GAAY,SAACkB,GAAD,mBAAC,eACRA,GADO,kBAETD,EAAU9B,SA6Bf,OACE,kBAAC,IAAD,CACEgC,QAAU,kBAAC,EAAYV,GACvBW,QAAQ,QACRC,UAAU,SACVpB,QAAUA,EACVqB,gBA/BiB,SAACrB,GACfA,GACHG,EAAYT,GAGdO,EAAWD,KA4BT,kBAAC,IAAD,CAASoB,UAAU,MAAME,MAAO,cAC9B,yBAAKzC,UAAU,gBAAgB0C,MAAO,CAACC,gBA3CpB,SAAC/C,GAAD,oBAA6CK,OAAO2B,OAAOhC,GAAUqC,KAAK,KAA1E,KA2CqCW,CAAiBhD,SCtFlEiD,G,OCQE,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQtC,EAA8B,EAA9BA,SAA8B,EAC1BM,oBAAkB,GADQ,mBACjDK,EADiD,KACxCC,EADwC,KAGlDiB,EACJ,wBAAIrC,UAAU,YACX8C,EAAO3C,KAAI,gBAAG4C,EAAH,EAAGA,KAAMlC,EAAT,EAASA,MAAT,OACV,wBACEb,UAAU,gBACVI,IAAM2C,EACNpC,QAAS,kBAAMqC,EAAgBnC,KAE7BkC,EACF,0BACE/C,UAAU,YACV0C,MAAO,CAACC,gBAAiB9B,UAO7BmC,EAAkB,SAACnC,GACvBO,GAAW,GACXZ,EAASK,IAOX,OACE,kBAAC,IAAD,CACE0B,UAAU,cACVF,QAAUA,EACVlB,QAAUA,EACVmB,QAAQ,QACRE,gBAVwB,SAACrB,GAC3BC,EAAWD,KAWT,kBAAC,IAAD,CAASoB,UAAU,MAAME,MAAO,WAC9B,0BAAMQ,KAAK,SAASjD,UAAU,YAC5B,yBAAKkD,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,uBAAsB,0BAAMC,EAAE,yRChDhGC,G,OCYK,SAAC,GAAmD,IAAjD1C,EAAgD,EAAhDA,MAAOiC,EAAyC,EAAzCA,OAAQtC,EAAiC,EAAjCA,SAC9BgD,EACJ,oCACE,kBAACC,EAAD,CACE5C,MAAQA,EACRL,SAAWA,IAEb,kBAAC,EAAD,CACEsC,OAASA,EACTtC,SAAWA,KAIjB,OACE,6BACE,kBAAC,IAAD,CACER,UAAU,eACVK,MAAQQ,EACR2C,OAASA,OCDFE,EA3BO,WAAO,IAAD,EACA5C,mBAAiB,WADjB,mBACnBD,EADmB,KACZ8C,EADY,KAa1B,OACE,yBAAK3D,UAAU,WACb,yBAAKA,UAAU,SACb,6CAEF,kBAAC,EAAD,CACEa,MAAQA,EACRL,SAXe,SAACK,GACpB8C,EAAS9C,IAWLiC,OAnB+C,CACnD,CAACC,KAAK,MAAOlC,MAAM,WACnB,CAACkC,KAAK,SAAUlC,MAAM,WACtB,CAACkC,KAAK,QAASlC,MAAM,WACrB,CAACkC,KAAK,OAAQlC,MAAM,gB,cCFxB+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.180cf4eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Slider } from 'antd';\r\n\r\nimport './style.scss';\r\n\r\ntype PickerSliders = {\r\n  colorRGB: {\r\n    [key:string]: number\r\n  },\r\n  handleClickCancel: () => void,\r\n  handleClickSuccess: () => void,\r\n  handleChangeSlider: (value: number, channel: string) => void\r\n}\r\n\r\nconst PickerSliders = ({\r\n  colorRGB, \r\n  handleClickCancel,\r\n  handleClickSuccess,\r\n  handleChangeSlider \r\n}: PickerSliders) => (\r\n  <>\r\n    <div className='sliders'>\r\n      { Object.keys(colorRGB).map((key: string) => (\r\n        <div className='slider-item' key={ key }>\r\n          <Slider\r\n            className={`slider slider-${key}`}\r\n            value={ colorRGB[key] }\r\n            max={ 255 }\r\n            tooltipVisible={ false }\r\n            onChange={(value: number) => handleChangeSlider(value, key) }\r\n          />\r\n          <input\r\n            className='slider-value'\r\n            readOnly\r\n            value={ colorRGB[key] }\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div className='buttons'>\r\n      <Button\r\n        type=\"primary\"\r\n        className='btn-cancel'\r\n        onClick={ handleClickCancel }\r\n      >\r\n        Cancel\r\n      </Button>\r\n      <Button\r\n        type=\"primary\"\r\n        className='btn-ok'\r\n        onClick={ handleClickSuccess }\r\n      >\r\n        Ok\r\n      </Button>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default PickerSliders;","import PickerRgb from './PickerRgb';\r\n\r\nexport default PickerRgb;","import React, { useState, useEffect } from 'react';\r\nimport { Popover, Tooltip } from 'antd';\r\n\r\nimport Sliders from './PickerSliders';\r\n\r\ntype PickerRgbState = {\r\n  r: number,\r\n  g: number,\r\n  b: number\r\n}\r\n\r\ntype PickerRgbProps = {\r\n  color: string,\r\n  onChange: (color: string) => void\r\n}\r\n\r\nconst PickerRgb = ({ color, onChange }: PickerRgbProps) => {\r\n  const [colorRGB, setColorRGB] = useState<PickerRgbState>({r: 0, g: 0, b: 0});\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setRGBColor(color);\r\n  }, [color]);\r\n\r\n  const convertHexColor = (values: PickerRgbState): void => {\r\n    const colorHex: string = Object.values(values).map((value: number) => {\r\n      const hexStr: string = value.toString(16);\r\n\r\n      return hexStr.length < 2 ? `0${hexStr}` : hexStr;\r\n    }).join('');\r\n\r\n    onChange(`#${colorHex}`);\r\n  }\r\n\r\n    const setRGBColor = (color: string): void => {\r\n      const splitted: RegExpMatchArray = color.split('#')[1].match(/.{1,2}/g)!;\r\n      const rgb: number[] = splitted.map((value: string) => parseInt(value, 16));\r\n      \r\n      setColorRGB({\r\n        r: rgb[0],\r\n        g: rgb[1],\r\n        b: rgb[2]\r\n    })\r\n  }\r\n\r\n  const colorRGBToString = (colorRGB: PickerRgbState): string => `rgb(${Object.values(colorRGB).join(',')})`;\r\n\r\n  const handleChangeSlider = (value: number, channel: string): void => {\r\n    setColorRGB((prevState) => ({\r\n      ...prevState,\r\n      [channel]: value\r\n    }));\r\n  }\r\n\r\n  const handleChange = (visible: boolean): void => {\r\n    if (!visible) {\r\n      setRGBColor(color);\r\n    }\r\n\r\n    setVisible(visible);\r\n  }\r\n\r\n  const handleClickSuccess = (): void => {\r\n    convertHexColor(colorRGB);\r\n    setVisible(false);\r\n  }\r\n\r\n  const handleClickCancel = (): void => {\r\n    setRGBColor(color);\r\n    setVisible(false);\r\n  }\r\n\r\n  const slidersProps = {\r\n    colorRGB,\r\n    handleClickSuccess,\r\n    handleClickCancel,\r\n    handleChangeSlider\r\n  }\r\n\r\n  return (\r\n    <Popover\r\n      content={ <Sliders {...slidersProps}/> }\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      visible={ visible }\r\n      onVisibleChange={ handleChange }\r\n    >\r\n      <Tooltip placement=\"top\" title={'Color pick'}>\r\n        <div className='preview-color' style={{backgroundColor: colorRGBToString(colorRGB)}}/>\r\n      </Tooltip>\r\n    </Popover>\r\n  )\r\n};\r\n\r\nexport default PickerRgb;","import Palettes from './Palettes';\r\n\r\nexport default Palettes;","import React, { useState } from 'react';\r\nimport { Popover, Tooltip } from 'antd';\r\n\r\nimport './style.scss';\r\n\r\ntype PalettesProps = {\r\n  colors: Array<{name:string, color:string}>,\r\n  onChange: (color: string) => void\r\n}\r\n\r\nconst Palettes = ({ colors, onChange }: PalettesProps) => {\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n\r\n  const content = (\r\n    <ul className='palettes'>\r\n      {colors.map(({ name, color }: any) => (\r\n        <li\r\n          className='palettes-item'\r\n          key={ name } \r\n          onClick={() => handleClickHide(color)}\r\n        >\r\n          { name }\r\n          <span \r\n            className='box-color' \r\n            style={{backgroundColor: color}}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  const handleClickHide = (color: string): void => {\r\n    setVisible(false);\r\n    onChange(color);\r\n  }\r\n\r\n  const handleVisibleChange = (visible: boolean): void => {\r\n    setVisible(visible);\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      placement=\"bottomRight\"\r\n      content={ content }\r\n      visible={ visible }\r\n      trigger=\"click\"\r\n      onVisibleChange={ handleVisibleChange }\r\n    >\r\n      <Tooltip placement=\"top\" title={'Palette'}>\r\n        <span role='button' className='dropdown'>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width='20' height='20' viewBox=\"0 0 512.011 512.011\"><path d=\"M505.755 123.592c-8.341-8.341-21.824-8.341-30.165 0L256.005 343.176 36.421 123.592c-8.341-8.341-21.824-8.341-30.165 0s-8.341 21.824 0 30.165l234.667 234.667a21.275 21.275 0 0015.083 6.251 21.275 21.275 0 0015.083-6.251l234.667-234.667c8.34-8.341 8.34-21.824-.001-30.165z\"/></svg>\r\n        </span>\r\n      </Tooltip>\r\n    </Popover>\r\n  )\r\n};\r\n\r\nexport default Palettes;","import ColorPicker from './ColorPicker';\r\n\r\nexport default ColorPicker;","import React from 'react';\r\nimport { Input } from 'antd';\r\n\r\nimport PickerRGB from 'views/components/PickerRGB';\r\nimport Palettes from 'views/components/Palettes';\r\n\r\nimport './style.scss';\r\n\r\ntype ColorPickerProps = {\r\n  color: string,\r\n  colors: Array<{name:string, color:string}>,\r\n  onChange: (color: string) => void\r\n}\r\n\r\nconst ColorPicker = ({ color, colors, onChange }: ColorPickerProps) => {\r\n  const suffix = (\r\n    <>\r\n      <PickerRGB\r\n        color={ color }\r\n        onChange={ onChange }\r\n      />\r\n      <Palettes\r\n        colors={ colors }\r\n        onChange={ onChange }\r\n      />\r\n    </>\r\n  )\r\n  return (\r\n    <div>\r\n      <Input\r\n        className='input-picker'\r\n        value={ color }\r\n        suffix={ suffix }\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ColorPicker;","import React, { useState } from 'react';\r\n\r\nimport ColorPicker from 'views/components/ColorPicker';\r\n\r\nconst App: React.FC = () => {\r\n  const [color, setColor] = useState<string>('#FFCC33');\r\n  const colors: Array<{name: string, color: string}> = [\r\n    {name:'Red', color:'#FD0000'},\r\n    {name:'Yellow', color:'#FFCC33'},\r\n    {name:'Green', color:'#28F000'},\r\n    {name:'Blue', color:'#00AAFF'}\r\n  ];\r\n\r\n  const handleChange = (color: string): void => {\r\n    setColor(color);\r\n  }\r\n\r\n  return (\r\n    <div className='content'>\r\n      <div className='title'>\r\n        <h1>Color picker</h1>\r\n      </div>\r\n      <ColorPicker\r\n        color={ color }\r\n        onChange={ handleChange }\r\n        colors={ colors }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'app';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}